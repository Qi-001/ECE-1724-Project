generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  type                  String  @default("user")
  provider              String? 
  providerAccountId     String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expiresAt    DateTime
  token        String   @unique
  createdAt    DateTime
  updatedAt    DateTime
  ipAddress    String?
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified Boolean?      @default(false)
  image         String?
  password      String?
  role          UserRole      @default(STUDENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  annotations   Annotation[]
  documents     Document[]
  adminGroups   Group[]       @relation("GroupAdmin")
  groups        GroupMember[]
  accounts      Account[]
  sessions      Session[]
  sentInvitations GroupInvitation[] @relation("SentInvitations")
  documentPermissions DocumentPermission[]
  comments Comment[]
  googleCalendarCredential GoogleCalendarCredential?
  createdEvents CalendarEvent[]
  eventAttendees EventAttendee[]

  @@map("user")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  adminId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  documents   Document[]
  admin       User          @relation("GroupAdmin", fields: [adminId], references: [id])
  members     GroupMember[]
  invitations GroupInvitation[]
  events      CalendarEvent[]
}

model GroupMember {
  id        String    @id @default(cuid())
  groupId   String
  userId    String
  role      GroupRole @default(MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Document {
  id              String       @id @default(cuid())
  title           String
  description     String?
  cloudStorageUrl String
  uploaderId      String
  groupId         String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  annotations     Annotation[]
  group           Group?       @relation(fields: [groupId], references: [id])
  uploader        User         @relation(fields: [uploaderId], references: [id])
  permissions     DocumentPermission[]
  comments        Comment[]
}

model Annotation {
  id          String   @id @default(cuid())
  content     String
  documentId  String
  userId      String
  pageNumber  Int
  x           Float
  y           Float
  width       Float    @default(200)
  height      Float    @default(100)
  lastEditedBy String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  documentId String
  userId     String
  pageNumber Int?
  positionX  Float?
  positionY  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GroupInvitation {
  id         String   @id @default(cuid())
  email      String
  groupId    String
  token      String   @unique
  expiresAt  DateTime
  inviterId  String
  createdAt  DateTime @default(now())
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter    User     @relation("SentInvitations", fields: [inviterId], references: [id])
}

model DocumentPermission {
  id         String   @id @default(cuid())
  role       String   @default("viewer") // "owner", "editor", "viewer"
  documentId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
}

enum UserRole {
  STUDENT
  ADMIN
}

enum GroupRole {
  MEMBER
  ADMIN
}

model GoogleCalendarCredential {
  id               String   @id @default(cuid())
  userId           String   @unique
  accessToken      String
  refreshToken     String
  expiryDate       DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id               String    @id @default(cuid())
  title            String
  description      String?
  location         String?
  startTime        DateTime
  endTime          DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  creatorId        String
  googleEventId    String?
  groupId          String?
  status           EventStatus @default(CONFIRMED)
  creator          User      @relation(fields: [creatorId], references: [id])
  group            Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  attendees        EventAttendee[]
}

model EventAttendee {
  id              String   @id @default(cuid())
  eventId         String
  userId          String
  responseStatus  ResponseStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  event           CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

enum EventStatus {
  CONFIRMED
  CANCELLED
  TENTATIVE
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}
